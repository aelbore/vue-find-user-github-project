{"version":3,"file":"toast.umd.min.js","sources":["../../../node_modules/custom-elements-ts/esm2015/custom-elements-ts.js","../../../.tmp/toast/src/toast.element.ts"],"sourcesContent":["const toKebabCase = str => {\r\n    return str\r\n        .replace(/([a-z])([A-Z])/g, '$1-$2')\r\n        .replace(/[\\s_]+/g, '-')\r\n        .toLowerCase();\r\n};\r\nconst toCamelCase = str => {\r\n    return str\r\n        .toLowerCase()\r\n        .replace(/(\\-\\w)/g, (m) => m[1].toUpperCase());\r\n};\r\nconst toDotCase = (str) => {\r\n    return str.replace(/(?!^)([A-Z])/g, ' $1')\r\n        .replace(/[_\\s]+(?=[a-zA-Z])/g, '.')\r\n        .toLowerCase();\r\n};\r\nconst tryParseInt = (value) => {\r\n    return (parseInt(value) == value && parseFloat(value) !== NaN) ? parseInt(value) : value;\r\n};\n\nconst Listen = (eventName, selector) => {\r\n    return (target, methodName) => {\r\n        if (!target.constructor.listeners) {\r\n            target.constructor.listeners = [];\r\n        }\r\n        target.constructor.listeners.push({ selector: selector, eventName: eventName, handler: target[methodName] });\r\n    };\r\n};\r\nconst addEventListeners = (target) => {\r\n    if (target.constructor.listeners) {\r\n        for (const listener of target.constructor.listeners) {\r\n            const eventTarget = (listener.selector)\r\n                ? target.shadowRoot.querySelector(listener.selector)\r\n                    ? target.shadowRoot.querySelector(listener.selector) : null\r\n                : target;\r\n            if (eventTarget) {\r\n                eventTarget.addEventListener(listener.eventName, (e) => {\r\n                    listener.handler.call(target, e);\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\r\nconst Dispatch = (eventName) => {\r\n    return (target, propertyName) => {\r\n        function get() {\r\n            const self = this;\r\n            return {\r\n                emit(options) {\r\n                    const evtName = (eventName) ? eventName : toDotCase(propertyName);\r\n                    self.dispatchEvent(new CustomEvent(evtName, options));\r\n                }\r\n            };\r\n        }\r\n        Object.defineProperty(target, propertyName, { get });\r\n    };\r\n};\n\nconst Prop = () => {\r\n    return (target, propName) => {\r\n        const attrName = toKebabCase(propName);\r\n        function get() {\r\n            if (this.props[propName]) {\r\n                return this.props[propName];\r\n            }\r\n            return this.getAttribute(attrName);\r\n        }\r\n        function set(value) {\r\n            if (this.__connected) {\r\n                const oldValue = this.props[propName];\r\n                this.props[propName] = tryParseInt(value);\r\n                if (typeof value != 'object') {\r\n                    this.setAttribute(attrName, value);\r\n                }\r\n                else {\r\n                    this.onAttributeChange(attrName, oldValue, value, false);\r\n                }\r\n            }\r\n            else {\r\n                if (!this.hasAttribute(toKebabCase(propName))) {\r\n                    this.constructor.propsInit[propName] = value;\r\n                }\r\n            }\r\n        }\r\n        if (!target.constructor.propsInit) {\r\n            target.constructor.propsInit = {};\r\n        }\r\n        target.constructor.propsInit[propName] = null;\r\n        Object.defineProperty(target, propName, { get, set });\r\n    };\r\n};\r\nconst getProps = (target) => {\r\n    const watchAttributes = target.constructor.watchAttributes;\r\n    const plainAttributes = Object.assign({}, watchAttributes);\r\n    Object.keys(plainAttributes).forEach(v => plainAttributes[v] = '');\r\n    const cycleProps = Object.assign({}, plainAttributes, target.constructor.propsInit);\r\n    return Object.keys(cycleProps);\r\n};\r\nconst initializeProps = (target) => {\r\n    const watchAttributes = target.constructor.watchAttributes;\r\n    for (let prop of getProps(target)) {\r\n        if (watchAttributes) {\r\n            if (watchAttributes[toKebabCase(prop)] == null) {\r\n                watchAttributes[toKebabCase(prop)] = '';\r\n            }\r\n            else {\r\n                const attribValue = target.props[prop] || target.getAttribute(toKebabCase(prop));\r\n                if (typeof target[watchAttributes[prop]] == 'function') {\r\n                    target[watchAttributes[prop]]({ new: attribValue });\r\n                }\r\n            }\r\n        }\r\n        if (target.constructor.propsInit[prop]) {\r\n            if (!target.hasAttribute(toKebabCase(prop))) {\r\n                target[prop] = target.constructor.propsInit[prop];\r\n            }\r\n        }\r\n    }\r\n};\n\nconst CustomElement = (args) => {\r\n    return (target) => {\r\n        var _a;\r\n        const tag = args.tag || toKebabCase(target.prototype.constructor.name);\r\n        const customElement = (_a = class extends target {\r\n                constructor() {\r\n                    super();\r\n                    this.props = {};\r\n                    this.showShadowRoot = args.shadow == null ? true : args.shadow;\r\n                    if (!this.shadowRoot && this.showShadowRoot) {\r\n                        this.attachShadow({ mode: 'open' });\r\n                    }\r\n                }\r\n                static get observedAttributes() {\r\n                    return Object.keys(this.propsInit || {}).map(x => toKebabCase(x));\r\n                }\r\n                attributeChangedCallback(name, oldValue, newValue) {\r\n                    this.onAttributeChange(name, oldValue, newValue);\r\n                }\r\n                onAttributeChange(name, oldValue, newValue, set = true) {\r\n                    if (oldValue != newValue) {\r\n                        if (set) {\r\n                            this[toCamelCase(name)] = newValue;\r\n                        }\r\n                        const watchAttributes = this.constructor.watchAttributes;\r\n                        if (watchAttributes && watchAttributes[name]) {\r\n                            const methodToCall = watchAttributes[name];\r\n                            if (this.__connected) {\r\n                                if (typeof this[methodToCall] == 'function') {\r\n                                    this[methodToCall]({ old: oldValue, new: newValue });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                connectedCallback() {\r\n                    this.__render();\r\n                    super.connectedCallback && super.connectedCallback();\r\n                    this.__connected = true;\r\n                    addEventListeners(this);\r\n                    initializeProps(this);\r\n                }\r\n                __render() {\r\n                    if (this.__connected)\r\n                        return;\r\n                    const template = document.createElement('template');\r\n                    const style = ` <style>${args.style ? args.style : ''}</style>`;\r\n                    template.innerHTML = `${this.showShadowRoot ? style : ''}${args.template ? args.template : ''}`;\r\n                    (this.showShadowRoot ? this.shadowRoot : this).appendChild(document.importNode(template.content, true));\r\n                }\r\n            },\r\n            _a.__connected = false,\r\n            _a);\r\n        if (!customElements.get(tag)) {\r\n            customElements.define(tag, customElement);\r\n        }\r\n        return customElement;\r\n    };\r\n};\n\nconst Watch = (attrName) => {\r\n    return (target, propertyName) => {\r\n        if (!target.constructor.watchAttributes) {\r\n            target.constructor.watchAttributes = {};\r\n        }\r\n        target.constructor.watchAttributes[toKebabCase(attrName)] = propertyName;\r\n        if (!target.constructor.propsInit) {\r\n            target.constructor.propsInit = {};\r\n        }\r\n        target.constructor.propsInit[attrName] = null;\r\n    };\r\n};\n\nconst Toggle = () => {\r\n    return (target, propName) => {\r\n        function get() {\r\n            const getAttribute = (propName) => {\r\n                if (this.hasAttribute(propName)) {\r\n                    const attrValue = this.getAttribute(propName);\r\n                    if (/^(true|false|^$)$/.test(attrValue)) {\r\n                        return attrValue == 'true' || attrValue == '';\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            return getAttribute(propName);\r\n        }\r\n        function set(value) {\r\n            const oldValue = value;\r\n            if (value != undefined) {\r\n                switch (typeof value) {\r\n                    case 'boolean':\r\n                        break;\r\n                    case 'string':\r\n                        if (/^(true|false|^$)$/.test(value)) {\r\n                            value = oldValue == 'true' || oldValue == '';\r\n                        }\r\n                        else {\r\n                            console.warn(`TypeError: Cannot set boolean toggle property '${propName}' to '${value}'`);\r\n                            value = false;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw (`TypeError: Cannot set boolean toggle property '${propName}' to '${value}'`);\r\n                }\r\n            }\r\n            if (this.__connected) {\r\n                this.props[propName] = value || false;\r\n                if (oldValue !== '' && oldValue !== null) {\r\n                    this.setAttribute(propName, value);\r\n                }\r\n                else {\r\n                    if (value) {\r\n                        this.setAttribute(propName, '');\r\n                    }\r\n                    else {\r\n                        this.removeAttribute(propName);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (!this.hasAttribute(toKebabCase(propName))) {\r\n                    this.constructor.propsInit[propName] = value;\r\n                }\r\n            }\r\n        }\r\n        if (!target.constructor.propsInit) {\r\n            target.constructor.propsInit = {};\r\n        }\r\n        target.constructor.propsInit[propName] = null;\r\n        Object.defineProperty(target, propName, { get, set });\r\n    };\r\n};\n\nexport { CustomElement, Watch, Prop, initializeProps, Toggle, Listen, addEventListeners, Dispatch };\n//# sourceMappingURL=custom-elements-ts.js.map\n","import { CustomElement, Prop, Watch } from 'custom-elements-ts';\n\nexport interface ARToastMessage {\n  severity?: string;\n  summary?: string;\n  detail?: string;\n}\n\n@CustomElement({\n  tag: 'ar-toast',\n  template: `<div class=\\\"ar-toast\\\"></div> <template id=\\\"toast-template\\\"> <div class=\\\"ar-toast-item-container ar-state-highlight ar-corner-all ar-shadow\\\"> <div class=\\\"ar-toast-item\\\"> <div class=\\\"ar-toast-icon-close\\\"></div> <span class=\\\"ar-toast-image\\\"><i id=\\\"icon\\\" class=\\\"icon\\\"></i></span> <div class=\\\"ar-toast-message\\\"> <span id=\\\"summary\\\" class=\\\"ar-toast-title\\\">Summary</span> <p id=\\\"detail\\\">Details</p> </div> <div class=\\\"clear\\\"></div> </div> </div> </template>`,\n  style: ':host{font-family:\"Helvetica Neue\",Roboto,sans-serif}:host *{box-sizing:border-box}:host .ar-toast{position:fixed;top:20px;right:20px;width:20em;z-index:9999}:host .ar-toast-item-container{position:relative;margin:0 0 10px 0;opacity:0;transition:opacity 1.5s}:host .ar-toast-item-container.ar-state-highlight{border-color:#156090;background:#186ba0;color:#fff}:host .ar-toast-item-container.ar-state-highlight.info{background-color:#2196f3;border-color:#2196f3}:host .ar-toast-item-container.ar-state-highlight.error{background-color:#f44336;border-color:#f44336}:host .ar-toast-item-container.ar-state-highlight.warn{background-color:#ffb300;border-color:#ffb300}:host .ar-toast-item-container.ar-state-highlight.success{background-color:#4caf50;border-color:#4caf50}:host .ar-toast-item-container.ar-corner-all{-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}:host .ar-toast-item-container.ar-shadow{-webkit-box-shadow:0 1px 3px 0 rgba(0,0,0,0.3);-moz-box-shadow:0 1px 3px 0 rgba(0,0,0,0.3);box-shadow:0 1px 3px 0 rgba(0,0,0,0.3)}:host .ar-toast-item-container.show{opacity:1}:host .ar-toast-item{position:relative;display:block;padding:.5em 1em}:host .ar-toast-item p{padding:0;margin:0}:host .ar-toast-icon-close{position:absolute;top:4px;right:4px;cursor:pointer}:host .ar-toast-icon-close:after{content:\"×\";position:absolute;right:5px}:host .ar-toast-title{font-weight:bold;padding:0 0 .5em 0;display:block}:host .ar-toast-image{position:absolute;display:inline-block;left:.5em;top:.25em;padding:0;font-size:2em;border:2px solid;border-radius:50%;width:25px;height:25px}:host .ar-toast-image .icon{position:absolute;font-style:normal;width:20px;height:20px}:host .ar-toast-image .icon:before,:host .ar-toast-image .icon:after{content:\"\";position:absolute;background-color:#fff;pointer-events:none}:host .ar-toast-image .icon.icon-success{top:4px;left:8px}:host .ar-toast-image .icon.icon-success:before{width:2px;height:15px;transform:rotate(45deg);border-radius:8px;right:14px}:host .ar-toast-image .icon.icon-success:after{bottom:6px;left:-3px;width:2px;height:9px;transform:rotate(-45deg);border-radius:8px}:host .ar-toast-image .icon.icon-info:before,:host .ar-toast-image .icon.icon-warn:before{width:3px;height:10px;border-radius:4px;bottom:8px;left:9px}:host .ar-toast-image .icon.icon-info:after,:host .ar-toast-image .icon.icon-warn:after{width:3px;height:4px;top:14px;left:9px;border-radius:8px}:host .ar-toast-image .icon.icon-warn{top:0;left:1px;transform:rotate(180deg)}:host .ar-toast-image .icon.icon-error:before{transform:rotate(45deg)}:host .ar-toast-image .icon.icon-error:after{transform:rotate(-45deg)}:host .ar-toast-image .icon.icon-error:before,:host .ar-toast-image .icon.icon-error:after{width:2px;height:16px;border-radius:8px;left:9px;top:2px}:host .ar-toast-message{padding:0 0 .25em 0;margin-left:2.5em}:host .ar-toast-message p{font-weight:normal}:host clear{clear:both}'\n})\nexport class ARToastElement extends HTMLElement {\n\n  @Prop() duration;\n  @Prop() message;\n\n  @Watch('message')\n  onPropertyChangedMessage(value: any) {\n    if (value.new) {\n      this.showToast(value.new)\n    }\n  }\n\n  showToast(message: ARToastMessage) {\n    const template: any = this.shadowRoot.querySelector('#toast-template');\n    const fragment: DocumentFragment = template.content.cloneNode(true);\n\n    const container = fragment.querySelector('.ar-toast-item-container');\n    container.classList.add(message.severity);\n    container.querySelector('#icon').classList.add(`icon-${message.severity}`);\n    container.querySelector('#summary').innerHTML = message.summary;\n    container.querySelector('#detail').innerHTML = message.detail;\n\n    this.shadowRoot.querySelector('.ar-toast').appendChild(fragment);\n    \n    const target: HTMLElement = this.shadowRoot.querySelector('.ar-toast .ar-toast-item-container:last-child');\n    this._startTransition(target);\n  }\n\n  private _startTransition(target: HTMLElement) {\n    const timeout = setTimeout(() => this._endTransition(target), this.duration);\n    const handler: EventListener = () => {\n      clearTimeout(timeout);\n      this._endTransition(target);\n    };\n    target.classList.add('show');\n    target.querySelector('.ar-toast-icon-close').addEventListener('click', handler);\n  }\n\n  private _endTransition(target: HTMLElement) {\n    target.classList.remove('show');\n    setTimeout(() => target && target.remove(), 1500);\n  }\n\n}"],"names":["toKebabCase","str","replace","toLowerCase","tryParseInt","value","parseInt","NaN","parseFloat","Prop","target","propName","attrName","constructor","propsInit","Object","defineProperty","get","this","props","getAttribute","set","__connected","oldValue","setAttribute","onAttributeChange","hasAttribute","initializeProps","watchAttributes","prop","plainAttributes","assign","keys","forEach","v","cycleProps","getProps","attribValue","new","HTMLElement","[object Object]","showToast","message","fragment","shadowRoot","querySelector","content","cloneNode","container","classList","add","severity","innerHTML","summary","detail","appendChild","_startTransition","timeout","setTimeout","_endTransition","duration","addEventListener","clearTimeout","remove","propertyName","Watch","args","_a","tag","prototype","name","customElement","super","showShadowRoot","shadow","attachShadow","mode","observedAttributes","map","x","newValue","m","toUpperCase","toCamelCase","methodToCall","old","__render","connectedCallback","listeners","listener","eventTarget","selector","eventName","e","handler","call","addEventListeners","template","document","createElement","style","importNode","customElements","define","CustomElement","ARToastElement"],"mappings":"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"}